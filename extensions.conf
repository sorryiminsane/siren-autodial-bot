[autodial-ivr]
exten => s,1,NoOp(Starting AutoDial IVR for ${__OriginalTargetNumber}, initiated by TGID: ${__AgentTelegramID}, CallID: ${__CallID}, TrackingID: ${__TrackingID})
same => n,Answer()

; Set global variables with double underscores to ensure they persist across contexts
same => n,Set(__CALLID=${__CallID})
same => n,Set(__AGENTID=${__AgentTelegramID})
same => n,Set(__TARGET=${__OriginalTargetNumber})
same => n,Set(__CAMPAIGN=${__CampaignID})
same => n,Set(__TRACKINGID=${__TrackingID})

; Set channel variables for AMI events
same => n,Set(CHANNEL(callid)=${__CALLID})
same => n,Set(CHANNEL(trackingid)=${__TRACKINGID})
same => n,Set(CHANNEL(agentid)=${__AGENTID})
same => n,Set(CHANNEL(target)=${__TARGET})

; Wait to ensure audio path is established
same => n,Wait(1)

; Set timeouts for better user experience
same => n,Set(TIMEOUT(digit)=3)
same => n,Set(TIMEOUT(response)=5)

; Play prompt and read DTMF
same => n,Read(DTMF_DIGIT,custom/autodial_prompt,1,,1,5) ; Play prompt, wait 5s for 1 digit
same => n,GotoIf($["${DTMF_DIGIT}" = "1"]?notify_bot:hangup)

same => n(notify_bot),NoOp(Received 1 from ${__TARGET}, notifying TGID: ${__AGENTID}, Campaign: ${__CAMPAIGN}, CallID: ${__CALLID}, TrackingID: ${__TRACKINGID})

; Send detailed UserEvent with all tracking information
same => n,UserEvent(AutoDialResponse,
AgentID: ${__AGENTID},
CallerID: ${__TARGET},
PressedOne: Yes,
CampaignID: ${__CAMPAIGN},
CallID: ${__CALLID},
TrackingID: ${__TRACKINGID},
Channel: ${CHANNEL},
Uniqueid: ${UNIQUEID})

same => n,Playback(custom/thankyou)  ; Play the second message from custom dir
same => n,Wait(1)             ; Wait briefly after playback
same => n,Hangup()             ; Hang up after the second message and wait

same => n(hangup),NoOp(No response or invalid digit from ${__TARGET})

; Send detailed UserEvent for no response
same => n,UserEvent(AutoDialResponse,
AgentID: ${__AGENTID},
CallerID: ${__TARGET},
PressedOne: No,
CampaignID: ${__CAMPAIGN},
CallID: ${__CALLID},
TrackingID: ${__TRACKINGID},
Channel: ${CHANNEL},
Uniqueid: ${UNIQUEID})

same => n,Hangup()

; Handle hangup with all tracking information
exten => h,1,NoOp(Call ended for ${__TARGET}, CallID: ${__CALLID}, TrackingID: ${__TRACKINGID})

; Send detailed hangup event
same => n,UserEvent(CallEnded,
AgentID: ${__AGENTID},
CallerID: ${__TARGET},
CampaignID: ${__CAMPAIGN},
CallID: ${__CALLID},
TrackingID: ${__TRACKINGID},
Channel: ${CHANNEL},
Uniqueid: ${UNIQUEID},
HangupCause: ${HANGUPCAUSE})